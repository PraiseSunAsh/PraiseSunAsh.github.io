<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络第一弹</title>
      <link href="/2019/07/07/ji-suan-ji-wang-luo-di-yi-dan/"/>
      <url>/2019/07/07/ji-suan-ji-wang-luo-di-yi-dan/</url>
      
        <content type="html"><![CDATA[<p><em>本系列是根据Crash Course Computer Science P28到 P30总结的笔记，部分定义参考维基百科，为了便于理解有些概念解释的可能不是很严谨，如有错误欢迎指出 (｀・ω・´)</em></p><p><em>课程链接不放了，自行B站搜索”计算机速成课”</em></p><h2 id="局域网（LAN）"><a href="#局域网（LAN）" class="headerlink" title="局域网（LAN）"></a>局域网（LAN）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>计算机间近距离构成的小型网络</strong></p><h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><p>局域网的实现之一，相对而言最成功 （1970）</p><p>ps:最简单的实现形式就是一根网线(所谓的以太网电线)连着多台计算机</p><h2 id="MAC（媒体访问控制）"><a href="#MAC（媒体访问控制）" class="headerlink" title="MAC（媒体访问控制）"></a>MAC（媒体访问控制）</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>当数据在网线中走的时候，计算机无法判断数据是给自己的还是给其他设备的。此时只需要在每个传输的数据包前缀加上目标计算机的mac地址，目标计算机在监听网线数据的时候一看是给自己的，就会监听这段数据。</p><p>ps：通常是指物理地址，比如有熊孩子蹭你家wifi，此时你禁掉他的网络其本质就是把他的mac地址拉黑</p><h2 id="CSMA-Carrier-Sense-Multiple-Access-载波侦听多路访问"><a href="#CSMA-Carrier-Sense-Multiple-Access-载波侦听多路访问" class="headerlink" title="CSMA(Carrier Sense Multiple Access/载波侦听多路访问)"></a>CSMA(Carrier Sense Multiple Access/载波侦听多路访问)</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>是实现MAC的一种协议</p><h3 id="Carrier（载体-载波）"><a href="#Carrier（载体-载波）" class="headerlink" title="Carrier（载体/载波）"></a>Carrier（载体/载波）</h3><p>对于以太网就是铜线，对于Wifi就是空气</p><h3 id="Carrier-Sense-载波侦听"><a href="#Carrier-Sense-载波侦听" class="headerlink" title="Carrier Sense(载波侦听)"></a>Carrier Sense(载波侦听)</h3><p>是指计算机在以太网中的计算机在发送数据前 ，必须对介质进行监听，当确认介质空闲时，才可以发送。</p><p>Multiple Access（多路访问）:多台计算机可以连一根网线，一台计算机发送的信息也能被多台计算机接收。</p><h3 id="宽带"><a href="#宽带" class="headerlink" title="宽带"></a>宽带</h3><p>载体传输数据的速度 </p><h2 id="指数退避"><a href="#指数退避" class="headerlink" title="指数退避"></a>指数退避</h2><p>一种算法，用于描述某些进程。比如当你没网的时候隔1分钟会重新拨号，如果拨号失败隔两分钟会再试一次，再失败会隔四分钟再试一次，时间间隔呈指数级增加。</p><h2 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h2><p>网络载体和在其中设备的总称。</p><p><img src="/2019/07/07/ji-suan-ji-wang-luo-di-yi-dan/01-01.PNG" alt></p><p>上述就构成了一个冲突域</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>一种网络设备，意义重大</p><p><img src="/2019/07/07/ji-suan-ji-wang-luo-di-yi-dan/01-02.gif" alt></p><p>ps：交换机可以更好的避免数据冲突，互联网也是这样构建出来的。</p><p><img src="/2019/07/07/ji-suan-ji-wang-luo-di-yi-dan/01-03.PNG" alt></p><p>pps：注意一个细节，交换机使得一台pc到另一台pc之间有多条路线可以走，这就引出了路由的问题。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>定义：在网络中把一个信息从源送到目标的这个过程。</p><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p>传输数据的一种方式，用专门的线路来传输数据。以前在老式电话中用的较多，但目前一些重要机构(银行，军队)仍会采用这种方式。</p><h2 id="报文互换-存储转发交换"><a href="#报文互换-存储转发交换" class="headerlink" title="报文互换(存储转发交换)"></a>报文互换(存储转发交换)</h2><p>传输数据的另一种方式，存储接收的信息，然后根据其目标选择线路。比电路交换要灵活。</p><h3 id="跳数-hop-count"><a href="#跳数-hop-count" class="headerlink" title="跳数(hop count)"></a>跳数(hop count)</h3><p>消息经过结点的次数，可以用来判断路由问题。</p><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>将数据拆成多个数据包，然后通过路由传递。</p><h3 id="IP-Internet-protocol-互联网协议"><a href="#IP-Internet-protocol-互联网协议" class="headerlink" title="IP(Internet protocol/互联网协议)"></a>IP(Internet protocol/互联网协议)</h3><p>规范了每个报文的具体格式</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>一组以点分隔的四组数字，用来记录服务器的地址。</p><h3 id="阻塞控制"><a href="#阻塞控制" class="headerlink" title="阻塞控制"></a>阻塞控制</h3><p>路由器会平衡与其他路由器间的负载，以确保传输可以快速可靠。</p><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>用于解决数据包到达目标后的乱序问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 LAN CSMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32天火速入门前端开发指南</title>
      <link href="/2019/07/05/32-tian-huo-su-ru-men-qian-duan-kai-fa-zhi-nan/"/>
      <url>/2019/07/05/32-tian-huo-su-ru-men-qian-duan-kai-fa-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        本人与今年的3.26日正式开始折腾前端开发。为什么是这天呢？因为在3月25号之前一直在折腾算法比赛(PS:当然最后划水了，嘤嘤嘤),也没时间搞别的东西了。其实对于我而言转移方向到前端上来是一个挺痛苦的过程，因为自打从中学起我就一直想做一个Android developer，但几经分析行情以及自身实力最终还是决定放弃移动开发，深层次原因暂且不表。在接下来的时间，我大概用了将近两个月的时间系统的掌握了(<del>装尼玛呢</del>)前端开发的核心技能，之后就能差不多去做一些东西了(主要是小程序),写这篇路线规划一方面对自己过去的这段时间做个总结，另一方面也算是给准备搞前端的小萌新们一个参考吧。</p><h2 id="学习资源推荐"><a href="#学习资源推荐" class="headerlink" title="学习资源推荐"></a>学习资源推荐</h2><ul><li><p><a href="https://biaoyansu.com/" target="_blank">表严肃</a><br>一个前端讲的很nice的讲师，课程质量很高，个人网站绝大部分都是免费课程。也可以去B站搜”表严肃”。</p></li><li><p>mooc平台：中国大学mooc/学堂在线/网易云课堂</p></li><li><p>Wiki:<br><a href="https://www.runoob.com/" target="_blank">菜鸟教程</a><br>  <a href="http://wiki.jikexueyuan.com/" target="_blank">极客学院Wiki</a></p></li></ul><ul><li>闲鱼(滑稽</li></ul><h2 id="具体的路线规划"><a href="#具体的路线规划" class="headerlink" title="具体的路线规划"></a>具体的路线规划</h2><p>接下来是根据我自己的学习经验总结的路线，如果你无从下手，就这样跟着走吧，至少我敢保证这种学习路线还是很平滑的。你每天大概只需要抽出三到四个小时，当然这指的是你集中精力的时间。</p><h3 id="第1天到第2天-HTML"><a href="#第1天到第2天-HTML" class="headerlink" title="第1天到第2天(HTML)"></a>第1天到第2天(HTML)</h3><p>可以去看这个培训班的视频<br> <a href="https://www.bilibili.com/video/av55070757?from=search&amp;seid=10707324267477760490" target="_blank">链接</a></p><p>在P32之前的部分都是HTML，其实这部分很简单的，你也可以去菜鸟教程上去看Wiki，跟着做也是一个不错的选择，不过我还是推荐看一下这个视频，他会把一些很基础的东西交给你，对新人来说还算友好，我当初记得一天就刷完了。</p><h3 id="第3天到第9天-CSS"><a href="#第3天到第9天-CSS" class="headerlink" title="第3天到第9天(CSS)"></a>第3天到第9天(CSS)</h3><p><a href="https://www.bilibili.com/video/av7293888" target="_blank">CSS火速入门</a></p><p>这部分的内容掌握常用的就ok，当然基本的概念(盒子模型/display/position属性、常见布局)一定要搞懂，虽说不难但每次写个页面都查文档还是很恶心的，这个地方建议去看表严肃，讲的很精炼，我当初看的还是上个链接中培训班的视频，往后几天差不多就看完了，不建议去看wiki，现用先查也算是一种不错的学习方式。在学习的过程中尽量跟着敲，用一些笔记软件(推荐onenote)把效果截图截下来，这步很重要！当然你懒得话也可以截视频里的图，这都没有问题，只要你觉得你能记得住。</p><h3 id="第10天到第11天-简易博客"><a href="#第10天到第11天-简易博客" class="headerlink" title="第10天到第11天(简易博客)"></a>第10天到第11天(简易博客)</h3><p><a href="https://www.bilibili.com/video/av8533758" target="_blank">简易博客搭建</a></p><p>利用之前的知识做一个简单的博客。</p><h3 id="第12天-响应式布局"><a href="#第12天-响应式布局" class="headerlink" title="第12天(响应式布局)"></a>第12天(响应式布局)</h3><p><a href="https://www.bilibili.com/video/av9468753" target="_blank">响应式布局</a></p><p>理解什么是所谓的响应式布局(很简单的，就是为不同设备写不同样式表)</p><h3 id="第13天到第14天-电商布局"><a href="#第13天到第14天-电商布局" class="headerlink" title="第13天到第14天(电商布局)"></a>第13天到第14天(电商布局)</h3><p><a href="https://www.bilibili.com/video/av8710320" target="_blank">电商布局</a></p><p>复杂的页面真的可以锻炼布局能力，不要偷懒，跟着好好做。</p><h3 id="第15天到第16天-Git与Github"><a href="#第15天到第16天-Git与Github" class="headerlink" title="第15天到第16天(Git与Github)"></a>第15天到第16天(Git与Github)</h3><p><a href="https://www.bilibili.com/video/av17603446" target="_blank">Git与Github</a></p><p>写这么久代码如果连全球最大同性交友网站还不会玩那可太low了。这个视频可能你会看的一头雾水，但没关系只要你会用就行了，其实就那几条命令。一些复杂的(合并分支版本控制啥的)现阶段真的用不到。搞明白后记得把你之前跟着写的那两个项目推到你的github上(你也可以把你之前写过的东西放上去)。</p><h3 id="第17天到第18天-bootstrap"><a href="#第17天到第18天-bootstrap" class="headerlink" title="第17天到第18天(bootstrap)"></a>第17天到第18天(bootstrap)</h3><p><a href="https://www.bilibili.com/video/av10037144" target="_blank">bootstrap</a></p><p>bootstrap是一个很好用的css框架，可以极大的提升你写布局的效率。</p><h3 id="第19天到第20天-新闻站开发"><a href="#第19天到第20天-新闻站开发" class="headerlink" title="第19天到第20天(新闻站开发)"></a>第19天到第20天(新闻站开发)</h3><p><a href="https://www.bilibili.com/video/av10373326" target="_blank">新闻站开发</a></p><p>利用前两天学的框架做一个新闻网站。</p><hr><p><strong>目前为止你大概就把html和css的基础部分差不多搞完了，现在开始就是真正重要的内容了。</strong></p><h3 id="第21天到第22天（JavaScript预科）"><a href="#第21天到第22天（JavaScript预科）" class="headerlink" title="第21天到第22天（JavaScript预科）"></a>第21天到第22天（JavaScript预科）</h3><p><a href="https://study.163.com/course/introduction/195001.htm" target="_blank">翁凯JavaScript</a></p><p>讲的不是很详细，但很适合拿来预科，提前了解下JavaScript这门语言，翁凯也确实是一个姿势水平很高的老师。</p><h3 id="第23天到第25天-Javascript高级程序设计"><a href="#第23天到第25天-Javascript高级程序设计" class="headerlink" title="第23天到第25天(Javascript高级程序设计)"></a>第23天到第25天(Javascript高级程序设计)</h3><p>这部分的内容并不推荐视频，因为真的太太太太重要了，推荐看书，书名就叫JavaScript高级程序设计(就是所谓的红宝书,豆瓣评分9.3的那个)，这本书号称前端圣经，面试中90%以上的问题都能在这里找到答案。当然把这本书通读完也是不现实的，我列一下重点章节吧</p><ul><li>第三章  基本概念</li><li>第四章  变量，作用域和内存问题</li><li>第五章  引用类型（5.1，5.2，5.5，5.6）剩下的部分可以先暂时不用看。</li><li>第六章  面向对象程序设计</li><li>第七章  函数表达式</li><li>第二十章  JSON</li></ul><p>看的时候也不要卡牛角尖，主要是把这本书上的代码示例跟着敲敲搞明白就好，给你们一个参考，这里是我当时总结的</p><p><a href="https://github.com/PraiseSunAsh/JavascriptLearning" target="_blank">JavaScriptLearning</a></p><p>这本书的链接<br><a href="https://u17250589.pipipan.com/fs/17250589-298071261" target="_blank">JavaScript高级程序设计第三版</a><br><a href="https://pan.baidu.com/s/1b44_4_qAs0go7TWW70Y8FQ" target="_blank">pdf版</a></p><p>这本书还是写的很不错的，推荐搞一本，闲鱼或者多抓鱼上二手的也不是很贵。如果说你真的看书看不下去，emmmmmm那好吧，这个清华大学的mooc讲的也还行(看第六章和第七章的7.3)</p><p><a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+44100343X+2019_T1/courseware/c7dfef247aa9401e862b70c5d71f7ebf/" target="_blank">Web前端攻城狮</a></p><h3 id="第26到第27天（Dom与Bom）"><a href="#第26到第27天（Dom与Bom）" class="headerlink" title="第26到第27天（Dom与Bom）"></a>第26到第27天（Dom与Bom）</h3><p><a href="https://biaoyansu.com/23.x" target="_blank">DOM</a></p><p>这部分也应该归到js里面，但因为很重要就单独拿出来了</p><h3 id="第28到第29天（JQuery）"><a href="#第28到第29天（JQuery）" class="headerlink" title="第28到第29天（JQuery）"></a>第28到第29天（JQuery）</h3><p><a href="https://www.bilibili.com/video/av10974062?from=search&amp;seid=15548467353666715703" target="_blank">JQuery</a></p><p>虽说现在一线的前端开发已经很少用JQuery了，但这个框架的思想还是值得学习的，还是好好看看吧。</p><h3 id="第30到第32天（Vue）"><a href="#第30到第32天（Vue）" class="headerlink" title="第30到第32天（Vue）"></a>第30到第32天（Vue）</h3><p><a href="https://www.bilibili.com/video/av13450835?from=search&amp;seid=15548467353666715703" target="_blank">Vue.js精讲</a></p><p>Vue应该算是目前为止最流行的框架了(???完了我这样说是有可能被砍的)，这个框架的作者是个华人，而且长得巨TM帅(误，Vue在所有js框架中应该算是对萌新相对比较友好的一个，当然你也可以选择去学习react或者angular，框架这种东西只要能用的顺手就行了。哦，这部分我根据课程内容总结了一份源码，感兴趣可以看看</p><p><a href="https://github.com/PraiseSunAsh/VueLearning" target="_blank">课程源码</a></p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好了，目前为止你应该能做一点东西了，接下来的发展方向看你的喜好吧。如果你想做移动端前端开发可以联系我，目前我们在开发一些小程序，项目确实需要一些人手，如果你想做PC浏览器端的前端开发那你需要研究下node.js/npm、webpack之类的工具，不管怎么说如果你真的能每天肝三小时把上述内容搞明白的话，你就已经算是入门前端开发了。万事开头难，接下来你就能做很多事情了：去写一个属于你的博客，或者是一个WebApp，或者给你喜欢的妹子写一个炫酷的页面拿来表白(误。。当然这上面的内容是远远不够的，要不然怎么叫入门呢。。。你还需要根据你自己的项目需求去掌握一些必要的技术栈，这都是一个不断爬坑的过程，在这些过程中希望你能自己善于总结，吸取经验，毕竟写代码真的是一件你付出多少它就给你回馈多少的事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 路径规划 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换种方式描述递归</title>
      <link href="/2019/07/03/huan-chong-fang-shi-miao-shu-di-gui/"/>
      <url>/2019/07/03/huan-chong-fang-shi-miao-shu-di-gui/</url>
      
        <content type="html"><![CDATA[<p> 递归作为算法中的重要思想，在编程的应用中可以说是相当广泛。但递归又由于其本身的抽象性，对于初学者而言理解起来相当困难。作为一个初学算法的菜鸡，想和大家分享一下自己理解递归的方式，如有错误和不妥，还望大佬指出。</p><p>​    首先我们要明白，一个递归函数内部肯定长这样                        </p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-799ee1432fc7f688.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/364/format/webp" alt="img"></p><p>也就是说，递归函数的终止条件一定要在递归函数的上面，否则递归函数就像一个没有底的坑，掉进去就永远出不来了。而如何写出递归函数的关键在于：<strong>找出解决问题的“笼统方法”。</strong></p><p>​    而<strong>解决问题的“笼统方法”</strong>又分为三种表现形式。</p><h4 id="“笼统方法”表现的第一种形式：直接解决这个问题的一小部分-递归解决这个问题的剩余部分"><a href="#“笼统方法”表现的第一种形式：直接解决这个问题的一小部分-递归解决这个问题的剩余部分" class="headerlink" title="“笼统方法”表现的第一种形式：直接解决这个问题的一小部分+递归解决这个问题的剩余部分"></a>“笼统方法”表现的第一种形式：直接解决这个问题的一小部分+递归解决这个问题的剩余部分</h4><p>​    <em>eg1：求n的阶乘</em></p><p>​    这是个非常简单的例子，但也给很多初学递归的人一种错觉：“哦这玩意儿就是递归啊，也没说的那么难理解嘛”，如果真是这样想的，那你可真的是naive。这只是递归的最简单的表现形式，但对于我们而言仍有大篇幅讨论的必要。假如说你现在是个完完全全的小白，你拿到这个问题首先应该想的是：这个问题我应该咋给他<strong>“应付”</strong>过去？</p><p>​    看看递归的程序是怎么<strong>“应付”</strong>的。</p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-2499236587518572.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/474/format/webp" alt="img"></p><p>​    要想找n的阶乘，我只需要找出n-1的阶乘，然后把他和n乘一块儿，至于n-1的阶乘改咋办？抱歉那就不是我的事儿了，您找下一层解决去吧。有没有觉得这种程序风格让人觉得很敷衍？其实递归程序都是这种敷衍的风格，正由于它的“敷衍”导致递归函数的时间复杂度非常的糟糕。在这个例子中，<strong>n*</strong>  直接解决了这个问题的一部分，<strong>fac（n-1）</strong>则解决了这个问题的剩余部分，二者拼凑起来，就成了解决这个问题的“笼统方法”。找出笼统方法还不行，如果这个程序就这样一直敷衍下去那么问题肯定是没有办法解决的，总要有一个不敷衍人完成具体的工作，这就是递归程序中的边界条件。这个问题的简单之处就在于它的边界条件很好找，n最多只能减到1，那就返回1给上层函数就好了。但接下来的这和例子的边界条件找起来就要稍微麻烦些了。</p><p><em>eg2：求一个数组的和</em></p><p>​    这个程序用层for循环就能轻松解决，但我们现在讨论的是递归，我想你应该没有那么无聊。其实对于初学者来说，把循环改写为递归也算是一种不错的训练方式。废话不多说，直接上码</p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-f096d23c2c8bf03b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/508/format/webp" alt="img"></p><p>​    这里我们在传参数的时候我们除了将数组传进去之外，还多传了一个begin。因为如果不传这个begin的话，我们没有办法切割这个数组，也就没有办法去“笼统”的解决这个问题，最终的边界条件就更没法儿找了。在这段代码中，<strong>a[begin]+</strong> 解决了这个问题的一部分，<strong>sum（a，begin+1）</strong>解决了这个问题的剩余部分。边界条件肯定就是begin跑到数组的最后，然后返回那个位置上的值就可以了。</p><h4 id="“笼统方法”表现的第二种形式：递归解决问题的一部分-递归解决问题的一部分-……"><a href="#“笼统方法”表现的第二种形式：递归解决问题的一部分-递归解决问题的一部分-……" class="headerlink" title="“笼统方法”表现的第二种形式：递归解决问题的一部分+递归解决问题的一部分+……"></a>“笼统方法”表现的第二种形式：递归解决问题的一部分+递归解决问题的一部分+……</h4><p>​    emmm，我举一个最形象的例子，假如你现在在进行期末“预习”备考，你肯定不会从头到尾翻一遍书，你最多把老师们画的重点例题好好研究一下。但你一学期啥也没学啊，而一道题又恰好涉及到了多个知识点，这时候你能做的就是把这道题涉及到的知识点好好看一下然后去搞懂，如果这道题的知识点牵连到了其他的知识，这时你就只有把那些“子知识”搞懂你才能搞懂“父知识”，当你把重点题中的某个“父知识”搞明白后，就可以说你<strong>递归解决了这个问题的一部分</strong>。但还有另一部分那些“父知识”等着你递归解决呢伙计。其实这个过程就算是这样的表现形式，你上百度百科上去查相关词条其实也算是这种表现形式。</p><p>​    <em>eg1：返回斐波那契数列中的第i个元素</em></p><p>​    上码：</p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-2e7b33926a3042b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/482/format/webp" alt="img"></p><p>​        这个例子可以说是很典型了。在这个例子中 <strong>fib(i-1)</strong> 解决了原问题的一部分，<strong>fib(i-2)</strong> 解决了这个问题的另一部分，二者加一块拼凑起来就解决了原问题。</p><p>​    <em>eg2：汉诺塔问题</em></p><p>​        只要你小时候你们家买过国产山寨按键机，我猜你们应该都玩过这个游戏，汉诺塔的规则我就不解释了，没玩过的可以自己去玩一下。（<a href="http://www.doudou.in/game/96009.html###" target="_blank" rel="noopener">汉诺塔游戏</a>）我们通常玩到的版本通常是只有三层四层或五层，其实原问题是那个印度神棍要把49层挪到目标柱子（她真要挪的话挪到太阳踏缩成黑洞都挪不完），但不管是挪3层还是49层，他们的本质都是一样的：把从上往下那n-1个盘子挪到空闲的柱子上作为辅助空间，把最底下那个最大的盘子（第n个）挪到目标柱子上，最后把那n-1个盘子挪到目标柱子上，所以所一共下来只要三步，无非是第一步和第三步需要递归完成。</p><p>​    </p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-36056614c48b7ecb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>这段代码描述的是挪的步骤，n是指从上往下第几个盘子</p><p>边界的极端情况，以三个为例</p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-590184538269eac8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/414/format/webp" alt="img"></p><p>此时左边还剩一个，直接挪到目标柱上即可完成。</p><h4 id="“笼统方法”表现的第三种形式：解决了子问题，就等于解决了原问题。"><a href="#“笼统方法”表现的第三种形式：解决了子问题，就等于解决了原问题。" class="headerlink" title="“笼统方法”表现的第三种形式：解决了子问题，就等于解决了原问题。"></a>“笼统方法”表现的第三种形式：解决了子问题，就等于解决了原问题。</h4><p>​    这种形式的递归问题可以说是最难解决的，因为相对应的等价问题并不是那么好找。比如求两个数的最大公约数的递归算法。</p><p><img src="https://upload-images.jianshu.io/upload_images/15923009-93517ef545e7e70a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/448/format/webp" alt="img"></p><p>这段代码看似简单，但如果没人提醒一句“要用辗转相除法”是绝对不太好想的，举个栗子，要想求出18与12的最大公约数那就等价于求12与6的最大公约数，就等价于求6与0的最大公约数。第一次进行等价问题的转化才是最难的，这种类似问题也对编程学习者的数学转化能力有所要求。</p><hr><p>​    最后一点需要强调，如何找出边界条件。我们要把目光放到变化的量上面，通常是将变化的量做为参数传入递归函数，进行边界条件判断时也是依据变化的量的极端情况进行判断的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 递归 Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/03/hello-world/"/>
      <url>/2019/07/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
